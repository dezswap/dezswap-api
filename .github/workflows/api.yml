name: Deploy Dezswap API

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

jobs:
  check_conditions:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      run_next_job: ${{ steps.check.outputs.run_next_job }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Dump workflow_run context safely
        run: |
          echo '${{ toJson(github.event.workflow_run) }}' > event.json
          cat event.json

      - name: Check paths and tag
        id: check
        run: |
          CHANGED_FILES=$(git diff HEAD~1 --name-only)
          # files except api related
          MATCHING_FILES=$(echo "$CHANGED_FILES" | grep -v '^indexer/')
          TAG=$(git tag --points-at HEAD | grep '^v' || true)
          
          echo "MATCHING FILES:"
          echo "$MATCHING_FILES"
          echo "TAG:"
          echo "$TAG"
          
          if [[ -z "$MATCHING_FILES" ]]; then
            echo "no matching file"
          elif [[ -z "$TAG" ]]; then
            echo "No deployable tag."
          else
            echo "run_next_job=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build dezswap-api images
    needs: check_conditions
    if: ${{ needs.check_conditions.outputs.run_next_job == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      image-tags: ${{ steps.build-final-images.outputs.image-tags }}
      git-tag: ${{ steps.get-git-tag.outputs.tag }}
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get Git tag
        id: get-git-tag
        run: |
          GIT_TAG=$(git tag --points-at HEAD | head -n 1)
          echo "Git tag detected: $GIT_TAG"
          VERSION_TAG=$(echo "$GIT_TAG" | sed 's/^v//')
          echo "tag=$VERSION_TAG" >> $GITHUB_OUTPUT

      - name: Test, build and package base image
        id: build-base-image
        working-directory: .
        env:
          APP_TYPE: ${{ env.APP_TYPE }}
        run: |
          # Test
          make test

          # Build and package base image
          touch config.yml
          docker build --build-arg APP_TYPE=$APP_TYPE -t dezswap-api:latest .
          docker save -o ${{ runner.temp }}/dezswap-api-latest.tar dezswap-api:latest

          # Create Dockerfile for network-specific images
          echo "FROM dezswap-api:latest
          COPY config.yml /app/config.yml" > Dockerfile.final

      - name: Build and package network-specific images
        id: build-final-images
        working-directory: .
        env:
          DIMENSION_CONFIG: ${{ secrets.DIMENSION_CONFIG }}
          CUBE_CONFIG: ${{ secrets.CUBE_CONFIG }}
          FETCHHUB_CONFIG: ${{ secrets.FETCHHUB_CONFIG }}
          DORADO_CONFIG: ${{ secrets.DORADO_CONFIG }}
          APP_TYPE: ${{ env.APP_TYPE }}
          IMAGE_TAG: ${{ steps.get-git-tag.outputs.tag }}
        run: |
          # Build network-specific images
          configs=("$DIMENSION_CONFIG" "$CUBE_CONFIG" "$FETCHHUB_CONFIG" "$DORADO_CONFIG")
          networks=("dimension" "cube" "fetchhub" "dorado")
          image_tags=()
          
          for i in "${!configs[@]}"; do
            echo "${configs[i]}" > config.yml
            FINAL_IMAGE_TAG=${networks[i]}-$APP_TYPE-$IMAGE_TAG
            docker build -t dezswap-api:$FINAL_IMAGE_TAG -f Dockerfile.final .
          done
