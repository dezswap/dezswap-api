name: Deploy Dezswap API

on:
  workflow_run:
    workflows: ["CI"]
    branches: [main]
    types:
      - completed

env:
  APP_TYPE: api
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: dezswap-api
  ECS_CLUSTER: dezswap-api

permissions:
  id-token: write
  contents: read

jobs:
  check_paths:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      run_next_job: ${{ steps.check_paths.outputs.run_next_job }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check changed file paths
        id: check_paths
        run: |
          CHANGED_FILES=$(git diff HEAD~1 --name-only)
          # files except api related
          MATCHING_FILES=$(echo "$CHANGED_FILES" | grep -v '^indexer/')

          if [[ -z "$MATCHING_FILES" ]]; then
            echo "no matching file"
            echo "run_next_job=false" >> $GITHUB_OUTPUT
          else
            echo "matching file $MATCHING_FILES"
            echo "run_next_job=true" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build dezswap-api images
    needs: check_paths
    if: ${{ needs.check_paths.outputs.run_next_job == 'true' }}
    runs-on: ubuntu-latest
    environment: production
    outputs:
      image-tags: ${{ steps.build-final-images.outputs.image-tags }}

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Test, build and package base image
        id: build-base-image
        working-directory: .
        env:
          APP_TYPE: ${{ env.APP_TYPE }}
        run: |
          # Test
          make test

          # Get image tag and make persistent
          IMAGE_TAG=$(git rev-parse --short HEAD)
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

          # Build and package base image
          docker build --build-arg APP_TYPE=$APP_TYPE -t dezswap-api:latest -t dezswap-api:$IMAGE_TAG .
          docker save -o ${{ runner.temp }}/dezswap-api-latest.tar dezswap-api:latest
          docker save -o ${{ runner.temp }}/dezswap-api-$IMAGE_TAG.tar dezswap-api:$IMAGE_TAG

          # Create Dockerfile for network-specific images
          touch config.yml
          echo "FROM dezswap-api:$IMAGE_TAG
          COPY config.yml /app/config.yml" > Dockerfile.final

      - name: Build and package network-specific images
        id: build-final-images
        working-directory: .
        env:
          DIMENSION_CONFIG: ${{ secrets.DIMENSION_CONFIG }}
          CUBE_CONFIG: ${{ secrets.CUBE_CONFIG }}
          FETCHHUB_CONFIG: ${{ secrets.FETCHHUB_CONFIG }}
          DORADO_CONFIG: ${{ secrets.DORADO_CONFIG }}
          APP_TYPE: ${{ env.APP_TYPE }}
        run: |
          # Fetch image tag
          IMAGE_TAG="${{ steps.build-base-image.outputs.image_tag }}"

          # Build network-specific images
          configs=("$DIMENSION_CONFIG" "$CUBE_CONFIG" "$FETCHHUB_CONFIG" "$DORADO_CONFIG")
          networks=("dimension" "cube" "fetchhub" "dorado")
          image_tags=()
          
          for i in "${!configs[@]}"; do
            echo "${configs[i]}" > config.yml
            FINAL_IMAGE_TAG=${networks[i]}-$APP_TYPE-$IMAGE_TAG
            docker build -t dezswap-api:$FINAL_IMAGE_TAG -f Dockerfile.final .
            image_tags+=("\"${networks[i]}\": \"$FINAL_IMAGE_TAG\"")
            docker save -o ${{ runner.temp }}/dezswap-api-$FINAL_IMAGE_TAG.tar dezswap-api:$FINAL_IMAGE_TAG
          done
          
          # Create JSON string of all image tags
          image_tags_string=$(IFS=, ; echo "${image_tags[*]}")
          echo "{ ${image_tags_string} }" > image_tags.json
          echo "image-tags=$(cat image_tags.json)" >> $GITHUB_OUTPUT

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: ${{ runner.temp }}/dezswap-api-*.tar

  push_to_ecr:
    name: Push images to ECR
    needs: build
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: dezswap-api-build
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: ${{ runner.temp }}

      - name: Load, tag and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          # Load all saved Docker images
          for tar in ${{ runner.temp }}/dezswap-api-*.tar; do
            docker load -i "$tar"
          done

          # Retag and push each loaded image
          for image in $(docker images --format "{{.Repository}}:{{.Tag}}" | grep ^dezswap-api:); do
            tag=$(echo $image | cut -d ':' -f 2)
            docker tag $image $ECR_REGISTRY/$ECR_REPOSITORY:$tag
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$tag
          done

  deploy_to_ecs:
    name: Deploy API
    runs-on: ubuntu-latest
    needs: push_to_ecr
    environment: production
    strategy:
      matrix:
        service: [ dimension, cube, fetchhub, dorado]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: dezswap-api-deploy
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Parse Image Tags
        id: parse-tags
        run: |
          printf '${{ needs.build.outputs.image-tags }}' > image_tags.json
          IMAGE_TAG=$(jq -r '.["'${{ matrix.service }}'"]' image_tags.json)
          echo "image-tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download Task Definition
        id: download-task-definition
        working-directory: .
        run: |
          TASK_DEFINITION=${{ matrix.service }}-dezswap-api
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION | jq '.taskDefinition' > $TASK_DEFINITION.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./${{ matrix.service }}-dezswap-api.json
          container-name: ${{ matrix.service }}-dezswap-api
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY}}:${{ steps.parse-tags.outputs.image-tag }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ matrix.service }}-dezswap-api
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
